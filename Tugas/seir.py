# -*- coding: utf-8 -*-
"""SEIR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OuqH2t_J6sUuHVvWkpoqC4EFcfYZnFvn

##MODEL SEIR BIASA
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Parameter model SEIR tanpa kelahiran dan kematian alami
beta = 0.0072   # Laju individu rentan ke exposed
theta = 0.0714  # Laju individu exposed menjadi terinfeksi
epsilon = 0.0252 # Laju kematian karena penyakit
gamma = 0.9747  # Laju individu sembuh

# Model SEIR dalam bentuk sistem persamaan diferensial
def seir_model(y, t, beta, theta, epsilon, gamma):
    S, E, I, R = y
    dSdt = -beta * S * I
    dEdt = beta * S * I  - (epsilon + theta) * E
    dIdt = theta * E - (epsilon + gamma) * I
    dRdt = gamma * I
    return [dSdt, dEdt, dIdt, dRdt]

# Nilai awal populasi
S0 = 9975  # Populasi rentan
E0 = 14    # Populasi terpapar
I0 = 6     # Populasi terinfeksi
R0 = 5     # Populasi sembuh

# Waktu simulasi (dalam hari)
t = np.linspace(0, 200, 200)

# Simulasi dengan metode odeint
y0 = [S0, E0, I0, R0]
sol = odeint(seir_model, y0, t, args=(beta, theta, epsilon, gamma))

# Plot hasil simulasi
plt.figure(figsize=(10,6))
plt.plot(t, sol[:, 0], label='Susceptible (Rentan)', color='blue')
plt.plot(t, sol[:, 1], label='Exposed (Terpapar)', color='orange')
plt.plot(t, sol[:, 2], label='Infected (Terinfeksi)', color='green')
plt.plot(t, sol[:, 3], label='Recovered (Sembuh)', color='red')
plt.xlabel('Waktu (Hari)')
plt.ylabel('Jumlah Individu')
plt.title('Simulasi Model SEIR untuk Penyebaran Tifus tanpa Kelahiran & Kematian Alami')
plt.legend()
plt.grid()
plt.show()

"""##MODEL SEIR DENGAN KELAHIRAN DAN KEMATIAN

"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Parameter model SEIR
alpha = 0.0159  # Laju kelahiran
beta = 0.0072   # Laju individu rentan ke exposed
mu = 0.0140     # Laju kematian alami
theta = 0.0714  # Laju individu exposed menjadi terinfeksi
epsilon = 0.0252 # Laju kematian karena penyakit
gamma = 0.9747  # Laju individu sembuh

# Model SEIR dalam bentuk sistem persamaan diferensial
def seir_model(y, t, alpha, beta, mu, theta, epsilon, gamma):
    S, E, I, R = y
    dSdt = alpha - (beta * I + mu) * S
    dEdt = beta * S * I - (epsilon + mu + theta) * E
    dIdt = theta * E - (epsilon + mu + gamma) * I
    dRdt = gamma * I - mu * R
    return [dSdt, dEdt, dIdt, dRdt]

# Nilai awal populasi
S0 = 9975  # Populasi rentan
E0 = 14  # Populasi terpapar
I0 = 6 # Populasi terinfeksi
R0 = 5  # Populasi sembuh


# Waktu simulasi (dalam hari)
t = np.linspace(0, 200, 200)

# Simulasi dengan metode odeint
y0 = [S0, E0, I0, R0]
sol = odeint(seir_model, y0, t, args=(alpha, beta, mu, theta, epsilon, gamma))

# Plot hasil simulasi
plt.figure(figsize=(10,6))
plt.plot(t, sol[:, 0], label='Susceptible (Rentan)')
plt.plot(t, sol[:, 1], label='Exposed (Terpapar)')
plt.plot(t, sol[:, 2], label='Infected (Terinfeksi)')
plt.plot(t, sol[:, 3], label='Recovered (Sembuh)')
plt.xlabel('Waktu (Hari)')
plt.ylabel('Proporsi Populasi')
plt.title('Simulasi Model SEIR untuk Penyebaran Tifus')
plt.legend()
plt.grid()
plt.show()